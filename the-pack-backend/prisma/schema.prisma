// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Creates a table containing user information
model User {
  id        String      @id @default(uuid())
  name      String    
  email     String    @unique
  password String
  phoneNum Int?
  role Role @default(CLIENT)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  //Assign a personal coach to clients
  coach       User?      @relation("ClientCoach", fields: [coachId], references: [id], onDelete: Cascade)
  coachId     String? 

  //Clients associated with Coach
  clients User[]  @relation("ClientCoach")

  //Relationship for scheduling and classes
  announcements   announcements[]
  appointmentForClient scheduling[] @relation("clientAppointments")
  appointmentForCoach scheduling[]  @relation("coachAppointments")
  createdClass Class[] @relation("creatorOfClass")
  coachAssigned Class[] @relation("assignedCoach")
  classJoined userClasses[]

  //The nutrition and exercise trackers for user
  nutritionEntries     NutritionTracker[]
  programEntries      Programs[]

  //The chatroom that coaches can create
  Chatroom Chatroom[]

  // the messages user or coaches can send to a chatroom
  Messages Messages[]
  availability coachAvailability[] @relation("timeAvailability")

  Participants ChatroomParticipants[]
}

model announcements{
  id String @id @default(uuid())
  title     String   @db.VarChar(255)
  content   String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class{
  id String @id @default(uuid())
  name String
  description String?
  
  creator User @relation(fields: [creatorId], references: [id], name: "creatorOfClass", onDelete: Cascade)
  creatorId String
  
  assignedCoach User  @relation(fields: [coachId], references: [id], name: "assignedCoach", onDelete: Cascade)
  coachId String
  
  currentlyEnrolled Int?
  
  classDates  ClassOnDate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userInClasses userClasses[]

}

model classDates{
  id String @id @default(uuid())
  date DateTime
  classDates  ClassOnDate[]
}

model ClassOnDate {
  id          Int               @id @default(autoincrement())
  classId     String
  dateId      String
  startTime   DateTime          // Start time of the class on this date
  endTime     DateTime          // End time of the class on this date
  class       Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
  date        classDates        @relation(fields: [dateId], references: [id], onDelete: Cascade)

  @@unique([classId, dateId])   // Ensure no duplicate relationships
}

model userClasses{
  id String @id @default(uuid())
  
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId String
  
  clientsInClass User @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String
  @@unique([clientId, classId]) //Composite unique constraint 
}

model scheduling{
  id      String            @id @default(uuid())
  client User @relation(fields: [clientId], references: [id], name: "clientAppointments", onDelete: Cascade)
  clientId String
  appointmentHolder User @relation(fields: [coachId], references: [id], name: "coachAppointments", onDelete: Cascade)
  coachId String
  timeSlot            TimeSlot?        @relation(fields: [timeSlotId], references: [id], onDelete: SetNull)
  timeSlotId          String?
  createdAt  DateTime @default(now())
}

model coachAvailability{
  id String @id @default(uuid())
  date     DateTime   @db.Date
  timeSlots           TimeSlot[] // Link to multiple time slots for the day
  timeSlotCreator User @relation(fields: [coachId], references: [id], name: "timeAvailability", onDelete: Cascade)
  coachId String
}

model TimeSlot {
  id                  String     @id @default(uuid())
  startTime           DateTime
  endTime             DateTime
  availability        coachAvailability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId      String
  isBooked            Boolean    @default(false) // Mark if the time slot has been booked
  createdAt           DateTime   @default(now())
  scheduling          scheduling[] // Add the back-reference to Scheduling
}

model NutritionTracker {
  id              String     @id @default(uuid())
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  userId          String
  date            DateTime
  goals           Int?
  calories        Int?       // Total calorie count
  protein         Float?     // Amount of protein (grams)
  carbohydrates   Float?     // Amount of carbohydrates (grams)
  fats            Float?     // Amount of fats (grams)
  mealType        MealType?  // Type of meal (breakfast, lunch, dinner, snack)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}


model Programs {
  id              String           @id @default(uuid())
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  
  programName     String
  //wanna add a description
  
  programDescription String

  programTags String
  
  //
  weekEntries   programWeeks[]

}

model programWeeks{
  id String @id @default(uuid())
  
  programName Programs @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  
  weekName String

  daysEntries   programDays[]
}

model programDays{
  id String @id @default(uuid())
  
  week programWeeks @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId String
  
  dayName String
  
  
  
  exerciseEntries   dailyExercise[]
}

model dailyExercise{
  id String @id @default(uuid())
  
  day programDays @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId String
  
  exerciseName String

  setNumber String
  
  reps String
  
  weight String
}

model Chatroom{

    id              String           @id @default(uuid())
    name            String 
    coach           User             @relation(fields: [coachId], references: [id], onDelete: Cascade)
    coachId         String 

    //the messages sent to the chatroom
    Messages Messages[]

    //the users in the chatroom
    Participants ChatroomParticipants[]
}

model ChatroomParticipants{
    id              String           @id @default(uuid())
    
    user            User             @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID          String

    chatroom        Chatroom         @relation(fields: [chatroomID], references: [id], onDelete: Cascade)
    chatroomID      String 

    @@unique([userID, chatroomID]) //Composite unique constraint 
}

model Messages{

    id              String           @id @default(uuid())
    content         String
    
    user            User             @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID          String

    chatroomId      Chatroom         @relation(fields: [chatroomID], references: [id], onDelete: Cascade)
    chatroomID      String 

    createdAt       DateTime         @default(now())
}

model CoachKey{
  
  id              String           @id @default(uuid())
  key             String?           @unique
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum Role {
  CLIENT
  COACH
  ADMIN
}