// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Creates a table containing user information
model User {
  id        String      @id @default(uuid())
  name      String    
  email     String    @unique
  password String
  phoneNum Int?
  role Role @default(CLIENT)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  //Assign a personal coach to clients
  coach       User?      @relation("ClientCoach", fields: [coachId], references: [id])
  coachId     String?

  //Clients associated with Coach
  clients User[]  @relation("ClientCoach")

  //Relationship for scheduling and classes
  announcements   announcements[]
  appointmentForClient scheduling[] @relation("clientAppointments")
  appointmentForCoach scheduling[]  @relation("coachAppointments")
  createdClass Class[]
  classJoined userClasses[]

  // is a foreign key for nutrition tracker
//  nutritionTracker nutritionTracker[]
}

model announcements{
  id String @id @default(uuid())
  title     String   @db.VarChar(255)
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class{
  id String @id @default(uuid())
  name String
  description String?
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String
  currentlyEnrolled Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userInClasses userClasses[]
}

model userClasses{
  id String @id @default(uuid())
  class Class @relation(fields: [classId], references: [id])
  classId String
  clientsInClass User @relation(fields: [clientId], references: [id])
  clientId String
  @@unique([clientId, classId]) //Composite unique constraint 
}

model scheduling{
  id String @id @default(uuid())
  timeSlot String
  client User @relation(fields: [clientId], references: [id], name: "clientAppointments")
  clientId String
  appointmentHolder User @relation(fields: [coachId], references: [id], name: "coachAppointments")
  coachId String

}
enum Role {
  CLIENT
  COACH
  ADMIN
}
