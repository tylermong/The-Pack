// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Creates a table containing user information
model User {
  id        String      @id @default(uuid())
  name      String    
  email     String    @unique
  password String
  phoneNum Int?
  role Role @default(CLIENT)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  //Assign a personal coach to clients
  coach       User?      @relation("ClientCoach", fields: [coachId], references: [id])
  coachId     String?

  //Clients associated with Coach
  clients User[]  @relation("ClientCoach")

  //Relationship for scheduling and classes
  announcements   announcements[]
  appointmentForClient scheduling[] @relation("clientAppointments")
  appointmentForCoach scheduling[]  @relation("coachAppointments")
  createdClass Class[]
  classJoined userClasses[]

  //The nutrition and exercise trackers for user
  nutritionEntries     NutritionTracker[]
  programEntries      Programs[]

  //The chatroom that coaches can create
  Chatroom Chatroom[]

  // the messages user or coaches can send to a chatroom
  Messages Messages[]
  availability coachAvailability[] @relation("timeAvailability")
}

model announcements{
  id String @id @default(uuid())
  title     String   @db.VarChar(255)
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class{
  id String @id @default(uuid())
  name String
  description String?
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String
  currentlyEnrolled Int?
  
  timeSlot String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userInClasses userClasses[]
}

model userClasses{
  id String @id @default(uuid())
  class Class @relation(fields: [classId], references: [id])
  classId String
  clientsInClass User @relation(fields: [clientId], references: [id])
  clientId String
  @@unique([clientId, classId]) //Composite unique constraint 
}

model scheduling{
  id String @id @default(uuid())
  timeSlot String
  client User @relation(fields: [clientId], references: [id], name: "clientAppointments")
  clientId String
  appointmentHolder User @relation(fields: [coachId], references: [id], name: "coachAppointments")
  coachId String
}

model coachAvailability{
  id String @id @default(uuid())
  timeSlot String
  timeSlotCreator User @relation(fields: [coachId], references: [id], name: "timeAvailability")
  coachId String
}

model NutritionTracker {
  id              String     @id @default(uuid())
  title           String
  description     String?
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  timeSlot        String?
  calories        Int?       // Total calorie count
  protein         Float?     // Amount of protein (grams)
  carbohydrates   Float?     // Amount of carbohydrates (grams)
  fats            Float?     // Amount of fats (grams)
  notes           String?    // User's personal notes
  mealType        MealType?  // Type of meal (breakfast, lunch, dinner, snack)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Programs {
  id              String           @id @default(uuid())
  programName     String
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  weekEntries   programWeeks[]
}

model programWeeks{
  id String @id @default(uuid())
  programName Programs @relation(fields: [programId], references: [id])
  programId String
  numOfWeeks String
  daysEntries   programDays[]
}

model programDays{
  id String @id @default(uuid())
  name String
  week programWeeks @relation(fields: [weekNum], references: [id])
  weekNum String
  exerciseEntries   dailyExercise[]
}

model dailyExercise{
  id String @id @default(uuid())
  day programDays @relation(fields: [dayNum], references: [id])
  dayNum String
  exerciseName String
  numOfSets String
  numOfReps String
  weightLifted String
  
}

model Chatroom{

    id              String           @id @default(uuid())
    name            String 
    coach           User             @relation(fields: [coachId], references: [id])
    coachId         String 

    Messages Messages[]
}

model Messages{

    id              String           @id @default(uuid())
    content         String
    user            User             @relation(fields: [userID], references: [id])
    userID          String

    chatroomId      Chatroom         @relation(fields: [chatroomID], references: [id])
    chatroomID      String 

    createdAt       DateTime         @default(now())
}

model CoachKey{
  
  id              String           @id @default(uuid())

}

enum ExerciseIntensity {
  LOW
  MEDIUM
  HIGH
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum Role {
  CLIENT
  COACH
  ADMIN
}
